/*! For license information please see 1-README-stories-mdx.5533daa7.iframe.bundle.js.LICENSE.txt */
(self.webpackChunkarticulate_nlg=self.webpackChunkarticulate_nlg||[]).push([[836],{"./node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Ck:()=>withMDXComponents,Eh:()=>MDXContext,Iu:()=>MDXProvider,MN:()=>useMDXComponents});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./node_modules/@storybook/addon-docs/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Qb:()=>_storybook_blocks__WEBPACK_IMPORTED_MODULE_1__.Qb});__webpack_require__("./node_modules/@storybook/addon-docs/dist/chunk-HLWAVYOI.mjs");var _storybook_blocks__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs")},"./src/stories/core/1.README.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__namedExportsOrder:()=>__namedExportsOrder,__page:()=>__page,default:()=>_1_README_stories});__webpack_require__("./node_modules/react/index.js");var lib=__webpack_require__("./node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("./node_modules/@storybook/addon-docs/dist/index.mjs"),blocks_dist=__webpack_require__("./node_modules/@storybook/blocks/dist/index.mjs");const READMEraw_namespaceObject='<h2 align="center">\n  💬 Articulate NLG\n</h2>\n<h3 align="center">\n  A natural language generator (NLG) that articulates concepts as words, phrases, and sentences.\n</h3>\n<p align="center">\n  <a href="https://badge.fury.io/js/articulate-nlg" target="_blank" rel="noopener noreferrer"><img src="https://badge.fury.io/js/articulate-nlg.svg" alt="npm Version" /></a>&nbsp;\n  <a href="https://github.com/justinmahar/articulate-nlg/" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/badge/GitHub-Source-success" alt="View project on GitHub" /></a>&nbsp;\n  <a href="https://github.com/justinmahar/articulate-nlg/actions?query=workflow%3ADeploy" target="_blank" rel="noopener noreferrer"><img src="https://github.com/justinmahar/articulate-nlg/workflows/Deploy/badge.svg" alt="Deploy Status" /></a>\n</p>\n\x3c!-- [lock:donate-badges] 🚫--------------------------------------- --\x3e\n<p align="center">\n  <a href="https://ko-fi.com/justinmahar"><img src="https://img.shields.io/static/v1?label=Buy%20me%20a%20coffee&message=%E2%9D%A4&logo=KoFi&color=%23fe8e86" alt="Buy me a coffee" /></a>&nbsp;<a href="https://github.com/sponsors/justinmahar" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86" alt="Sponsor"/></a>\n</p>\n\x3c!-- [/lock:donate-badges] ---------------------------------------🚫 --\x3e\n\n## Documentation\n\nRead the **[official documentation](https://justinmahar.github.io/articulate-nlg/)**.\n\n## Overview\n\nThis package allows you to define personas that have a vocabulary which define how to generate varying, coherent text.\n\n### Features include:\n\n- **💬 Generate speech using defined personas**\n  - Personas can articulate concepts as words, phrases, and sentences\n- **👍 Simple yet flexible API**\n  - Use the helpers below to build personas quickly and easily\n- **🤖 Great for chatbots, game NPCs, and more!**\n  - Create personas for a variety of purposes.\n\n\x3c!-- [lock:donate] 🚫--------------------------------------- --\x3e\n\n## Donate \n\nIf this project helped you, please consider buying me a coffee or sponsoring me. Your support is much appreciated!\n\n<a href="https://ko-fi.com/justinmahar"><img src="https://img.shields.io/static/v1?label=Buy%20me%20a%20coffee&message=%E2%9D%A4&logo=KoFi&color=%23fe8e86" alt="Buy me a coffee" /></a>&nbsp;<a href="https://github.com/sponsors/justinmahar" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/static/v1?label=Sponsor&message=%E2%9D%A4&logo=GitHub&color=%23fe8e86" alt="Sponsor"/></a>\n\n\x3c!-- [/lock:donate] ---------------------------------------🚫 --\x3e\n\n## Table of Contents \n\n- [Documentation](#documentation)\n- [Overview](#overview)\n  - [Features include:](#features-include)\n- [Donate](#donate)\n- [Table of Contents](#table-of-contents)\n- [Installation](#installation)\n- [Quick Start](#quick-start)\n- [Vocab Helper Functions](#vocab-helper-functions)\n  - [`say`](#say)\n  - [`capitalize`](#capitalize)\n  - [`sb`](#sb)\n  - [`sa`](#sa)\n  - [`sba`](#sba)\n  - [`capSay`](#capsay)\n  - [`choose`](#choose)\n    - [A note on functions:](#a-note-on-functions)\n  - [`weighted`](#weighted)\n  - [`chance`](#chance)\n  - [`cycle`](#cycle)\n  - [`maybe`](#maybe)\n  - [`param`](#param)\n  - [`ifThen`](#ifthen)\n  - [`ifNot`](#ifnot)\n  - [`ifElse`](#ifelse)\n  - [`doFirst`](#dofirst)\n  - [`render`](#render)\n- [TypeScript](#typescript)\n- [Icon Attribution](#icon-attribution)\n- [Contributing](#contributing)\n- [⭐ Found It Helpful? Star It!](#-found-it-helpful-star-it)\n- [License](#license)\n\n## Installation\n\n```\nnpm i articulate-nlg\n```\n\n## Quick Start\n\n```jsx\nimport { Persona } from "articulate-nlg";\n```\n\nIn short:\n\n- Define a "Persona" that has a vocabulary which defines how to generate coherent text.\n- Vocabularies use key strings that represent concepts, and function values that return the text to be generated.\n- Vocab concepts can be cross-referenced, making for interesting results.\n\nOne you construct a `Persona`, call `articulate("conceptName")` on the persona to generate text for that concept!\n\nSee the example below:\n\n```js\nimport { Persona } from "articulate-nlg";\n\nclass Dog extends Persona {\n  createVocab = () => {\n    // Persona helper functions, for convenience.\n    const say = this.say;\n    const capitalize = this.capitalize;\n    const capSay = this.capSay;\n    const choose = this.choose;\n    const chance = this.chance;\n    const cycle = this.cycle;\n    const param = this.param;\n    const ifElse = this.ifElse;\n\n    // Return an object containing strings mapped to functions,\n    // which return the text.\n    return {\n      greet: () => choose("woof", "bark", "sniff sniff", "wag tail"),\n      master: () =>\n        ifElse("name", capitalize(param("name")), "bringer of food"),\n      emoji: () =>\n        cycle({ group: "emoji" }, "👅", "🐶", "🐾", "💩", "🐩", "🐕‍"),\n      // This concept cross-references greet, master, and emoji using say().\n      welcomeHome: () =>\n        capSay("greet") +\n        "! Welcome home, " +\n        say("master") +\n        "! " +\n        say("emoji")\n    };\n  };\n\n  // Create and set the vocab for Dog.\n  vocab = this.createVocab();\n}\n\n// Create "max", a new Dog persona.\nlet max = new Dog();\n\nconsole.log(max.articulate("welcomeHome"));\n// This will generate text like following:\n// Sniff sniff! Welcome home, bringer of food! 🐾\n// Woof! Welcome home, bringer of food! 👅\n// Wag tail! Welcome home, bringer of food! 💩\n// Etc.\n\n// This will articulate the "greet" concept.\nconsole.log(max.articulate("greet"));\n// "woof", "bark", "sniff sniff", or "wag tail"\n\n// If you reference a concept that\'s not understood, you\'ll get\n// an empty string back and a warning will be printed.\nconsole.log(max.articulate("meow"));\n// ""\n\n// Params can be used in the vocab, too. Here, the "master"\n// concept uses a name if provided.\nconsole.log(max.articulate("master", { name: "justin" }));\n// "Justin"\nconsole.log(max.articulate("welcomeHome", { name: "justin" }));\n// Sniff sniff! Welcome home, Justin! 🐩\n\n// And if not provided, can fall back on a default using the\n// ifElse helper. See the function value for master above.\nconsole.log(max.articulate("master"));\n// "bringer of food"\n```\n\n## Vocab Helper Functions\n\nThe following helper functions are available in the `Persona` class. Use these to aid in generating interesting results when defining a vocabulary.\n\n### `say`\n\n`say (vocabKey: string): string`\n\nArticulates the concept with the vocab key provided. This function will generate the text for that vocab key.\n\n### `capitalize`\n\n`capitalize (text: string | () => string | {t: string | () => string, w: weight}): string`\n\nCapitalizes the first letter of the provided text.\n\n### `sb`\n\n`sb (text: string | () => string | {t: string | () => string, w: weight}): string`\n\nReturns the provided text with a space before it.\n\n### `sa`\n\n`sa (text: string | () => string | {t: string | () => string, w: weight}): string`\n\nReturns the provided text with a space after it.\n\n### `sba`\n\n`sba (text: string | () => string | {t: string | () => string, w: weight}): string`\n\nReturns the provided text with a space before and after it.\n\n### `capSay`\n\n`capSay (vocabKey: string): string`\n\nConvenience function that calls `capitalize(say(vocabKey))` to both articulate a concept and then capitalize the resulting text.\n\n### `choose`\n\n`choose (...texts: (string | () => string | {t: string | () => string, w: weight})[]): string`\n\nChooses one of the the provided texts or functions at random. Weights can be specified in the format `{t: text or function, w: weight}`, or by using the `weighted()` function (recommended). Weights default to `1` if not specified.\n\nAlong with `say()`, this function is at the heart of this NLG library.\n\n#### A note on functions:\n\nIf you pass a function, the function will be called and returned as a string. Using functions can significantly speed up articulation as text resolution will be deferred until the moment the text is needed.\n\nUsing functions is overkill for lower-level concepts. I recommend using functions for higher-level concepts (which nest lots of calls to `choose()`), and that you use function shorthand.\n\nFor example, this concept is slower because each `choose()` call is resolved before making the actual choice:\n\n```js\n  myConcept: choose(\n      choose(...),\n      choose(...),\n      ...\n    )\n```\n\nAnd this concept is faster because the functions defer the individual `choose()` calls until after the choice is made:\n\n```js\n  myConcept: choose(\n      () => choose(...),\n      () => choose(...),\n      ...\n    )\n```\n\n### `weighted`\n\n`weighted (text: string | () => string, weight: number = 1): {t: text, w: weight}`\n\nConvenience function that returns an object with the text (or function) and weight, for use with the `choose()` and `cycle()` functions. The returned object will be in the format `{t: text or function, w: weight}`. If you pass a function, it must return a string.\n\nWeights default to `1` if not specified.\n\n### `chance`\n\n`chance (text: string | () => string, chance: number): string`\n\nReturn the provided text given the chance provided, from `0` to `1`, or empty string otherwise.\n\nFor instance, a chance of `0.8` would mean an 80% chance the provided text was returned, and a 20% chance of empty string.\n\nIf the value provided is a function, that function will be called and its string return value would be returned if chosen.\n\n### `cycle`\n\n`cycle (group: {group: name}, ...texts: (text: string | () => string | {t: string | () => string, w: weight})[]): string`\n\nUses `choose()` to randomly select one of the provided texts, but ensures that the selected item is not repeated until all remaining items have been chosen. Items can be weighted, and can be functions that return strings.\n\nThe first argument is an object containing a group name for the items you\'d like to cycle: `{group: name}`\n\nUse this function to keep a degree of randomness while ensuring the text doesn\'t repeat too often.\n\n### `maybe`\n\n`maybe (text: string | () => string | {t: string | () => string, w: weight}): string`\n\nReturns the text provided 50% of the time, and empty string 50% of the time.\n\nYou can pass multiple texts. In that case, there\'s a 50% chance of empty string, or one of your texts being chosen using `choose()`. Texts can either be a string, weighted, or a function that returns a string.\n\n### `param`\n\n`param (paramKey: string): string`\n\nReturns text for the value of the param key provided. The param value can be a string, function, number, etc.\n\nParam functions must return a string. If the param value is not a string or function, it is concatenated with `""` and returned as a string.\n\n### `ifThen`\n\n`ifThen (paramKey: string, then: (text: string | () => string)): string`\n\nReturns the provided `then` text if the value of the param key is truthy, and returns empty string otherwise.\n\n### `ifNot`\n\n`ifNot (paramKey: string, then: (text: string | () => string)): string`\n\nReturns the provided `then` text if the value of the param key is falsy, and returns empty string otherwise.\n\n### `ifElse`\n\n`ifElse (paramKey: string, then: (text: string | () => string), otherwise: (text: string | () => string)): string`\n\nReturns the provided `then` text if the value of the param key is truthy, and returns the `otherwise` string otherwise.\n\n### `doFirst`\n\n`doFirst (paramTextPairs: {p: paramKey, t: string | () => string}[], defaultText: (string | () => string) = ""): string`\n\nReturns the text for the first param value that is truthy, or the default text if none are. `defaultText` is optional and defaults to empty string.\n\nUse this to avoid deeply nested `ifElse()` calls.\n\nText values can be either strings or functions that return strings.\n\n### `render`\n\n`render (val: any): string`\n\nRenders the provided value as a string.\n\n- If it\'s a string, it\'ll be returned.\n- If it\'s a function, it\'ll be called and its value will be recursively rendered and returned.\n- If it\'s weighted text, its text property `t` will be recursively rendered and returned.\n- If it\'s none of the above but truthy, it\'ll be concatenated with empty string and returned.\n- If it\'s falsy, empty string will be returned.\n\nThis function is called on all texts for the other helper functions and is included mainly for reference. You likely won\'t need to call it directly.\n\n\x3c!-- [lock:typescript] 🚫--------------------------------------- --\x3e\n\n## TypeScript\n\nType definitions have been included for [TypeScript](https://www.typescriptlang.org/) support.\n\n\x3c!-- [/lock:typescript] ---------------------------------------🚫 --\x3e\n\n\x3c!-- [lock:icon] 🚫--------------------------------------- --\x3e\n\n## Icon Attribution\n\nFavicon by [Twemoji](https://github.com/twitter/twemoji).\n\n\x3c!-- [/lock:icon] ---------------------------------------🚫 --\x3e\n\n\x3c!-- [lock:contributing] 🚫--------------------------------------- --\x3e\n\n## Contributing\n\nOpen source software is awesome and so are you. 😎\n\nFeel free to submit a pull request for bugs or additions, and make sure to update tests as appropriate. If you find a mistake in the docs, send a PR! Even the smallest changes help.\n\nFor major changes, open an issue first to discuss what you\'d like to change.\n\n\x3c!-- [/lock:contributing] --------------------------------------🚫 --\x3e\n\n## ⭐ Found It Helpful? [Star It!](https://github.com/justinmahar/articulate-nlg/stargazers)\n\nIf you found this project helpful, let the community know by giving it a [star](https://github.com/justinmahar/articulate-nlg/stargazers): [👉⭐](https://github.com/justinmahar/articulate-nlg/stargazers)\n\n## License\n\nSee [LICENSE.md](https://justinmahar.github.io/articulate-nlg/?path=/docs/license--docs).';var jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.Qb,{title:"Home"}),"\n",(0,jsx_runtime.jsx)(blocks_dist.Ih,{children:READMEraw_namespaceObject})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"Home",tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.MN)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}};const _1_README_stories=componentMeta,__namedExportsOrder=["__page"]},"./node_modules/memoizerific sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/memoizerific sync recursive",module.exports=webpackEmptyContext},"./node_modules/react/cjs/react-jsx-runtime.production.min.js":(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";var f=__webpack_require__("./node_modules/react/index.js"),k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(c,a,g){var b,d={},e=null,h=null;for(b in void 0!==g&&(e=""+g),void 0!==a.key&&(e=""+a.key),void 0!==a.ref&&(h=a.ref),a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l,exports.jsx=q,exports.jsxs=q},"./node_modules/react/jsx-runtime.js":(module,__unused_webpack_exports,__webpack_require__)=>{"use strict";module.exports=__webpack_require__("./node_modules/react/cjs/react-jsx-runtime.production.min.js")}}]);